/**
 * TylerB_room.c - Implementation of Building 2 rooms
 * 
 * This file contains the initialization and manipulation of Tyler's rooms
 * for the MUD game.
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <syslog.h>
#include "rooms.h"

/**
 * Get the next room based on current room and direction
 * Returns the ID of the next room, or 0 if no exit in that direction
 * Returns -1 for room transitions to other buildings
 * 
 * Note: This function will be called for this specific building only
 */
int get_next_room(int current_room, char direction) {
    switch(current_room) {
        case 1:  // Room 1
            switch(direction) {
                case 'n': return 0;        // North - no exit (Darth Maul)
                case 's': return 0;        // South - no exit (Darth Vader)
                case 'e': return 2;        // East - Room 2 (Darth Revan lets you escape)
                case 'w': return -1;       // West - new building (hop in a ship)
                default: return 0;
            }
        
        case 2:  // Room 2
            switch(direction) {
                case 'n': return 3;        // North - Room 3
                case 's': return 0;        // South - no exit
                case 'e': return 0;        // East - no exit
                case 'w': return 0;        // West - no exit
                default: return 0;
            }
            
        case 3:  // Room 3
            switch(direction) {
                case 'n': return 4;        // North - Room 4
                case 's': return 0;        // South - no exit
                case 'e': return 0;        // East - no exit
                case 'w': return 0;        // West - no exit
                default: return 0;
            }
            
        case 4:  // Room 4
            switch(direction) {
                case 'n': return 0;        // North - no exit
                case 's': return 0;        // South - no exit
                case 'e': return 5;        // East - Room 5
                case 'w': return 0;        // West - no exit
                default: return 0;
            }
            
        case 5:  // Room 5
            switch(direction) {
                case 'n': return 0;        // North - no exit
                case 's': return 0;        // South - no exit
                case 'e': return 6;        // East - Room 6
                case 'w': return 0;        // West - no exit
                default: return 0;
            }
            
        case 6:  // Room 6
            switch(direction) {
                case 'n': return 0;        // North - no exit
                case 's': return 7;        // South - Room 7
                case 'e': return 0;        // East - no exit
                case 'w': return 0;        // West - no exit
                default: return 0;
            }
            
        case 7:  // Room 7
            switch(direction) {
                case 'n': return 0;        // North - no exit
                case 's': return 8;        // South - Room 8
                case 'e': return 0;        // East - no exit
                case 'w': return 0;        // West - no exit
                default: return 0;
            }
            
        case 8:  // Room 8
            switch(direction) {
                case 'n': return 0;        // North - no exit
                case 's': return 0;        // South - no exit
                case 'e': return 9;        // East - Room 9
                case 'w': return 0;        // West - no exit
                default: return 0;
            }
            
        case 9:  // Room 9
            switch(direction) {
                case 'n': return 10;       // North - Room 10
                case 's': return 0;        // South - no exit
                case 'e': return 0;        // East - no exit
                case 'w': return 0;        // West - no exit
                default: return 0;
            }
            
        case 10:  // Room 10
            switch(direction) {
                case 'n': return 1;        // reset win
                case 's': return 0;        // South - no exit
                case 'e': return 1;        // East - Reset to Room 1 (WIN)
                case 'w': return 1;        // reset win
                default: return 0;
            }
            
        default:
            return 0;  // Invalid room
    }
}

/**
 * Initialize the rooms for Building 2
 */
void initialize_rooms_building2(Room rooms[]) {
    // Room 1
    rooms[0].id = 1;
    strcpy(rooms[0].north_desc, "you go north, and darth maul stares you down, menacingly");
    strcpy(rooms[0].south_desc, "you go south, and darth vader tries to force choke you");
    strcpy(rooms[0].east_desc, "you turn east, darth revan ignites both his lightsabers to fight the other sith and let you escape");
    strcpy(rooms[0].west_desc, "you turn west, hop in a ship to a new destination");
    rooms[0].is_start_room = true;
    rooms[0].is_item_room = false;
    rooms[0].is_connector_room = false;
    rooms[0].connected_building_id = 2;  // Connected building ID (logical ID, not physical position)

    // Room 2
    rooms[1].id = 2;
    strcpy(rooms[1].north_desc, "you go north, you fall into a new room filled with pink");
    strcpy(rooms[1].south_desc, "you go south, theres a batch of fresh fries steaming");
    strcpy(rooms[1].east_desc, "you turn east, theres a customer ordering a number 5");
    strcpy(rooms[1].west_desc, "you turn west, you see darth revan fighting other sith lords as you return to the star wars universe");
    rooms[1].is_start_room = false;
    rooms[1].is_item_room = false;
    rooms[1].is_connector_room = false;
    rooms[1].connected_building_id = 0;

    // Room 3
    rooms[2].id = 3;
    strcpy(rooms[2].north_desc, "you go north, theres a closet that leads to a pool"); // Goes to Room 4
    strcpy(rooms[2].south_desc, "you go south, you fall into a fast food restaurant"); // Returns to Room 2 - matching Room 2's north description
    strcpy(rooms[2].east_desc, "you turn east, and look out a window where you see tree with blue bird");
    strcpy(rooms[2].west_desc, "you turn west, there is a cupcake staring at you.");
    rooms[2].is_start_room = false;
    rooms[2].is_item_room = false;
    rooms[2].is_connector_room = true;
    rooms[2].connected_building_id = 3;  // Connected building ID (logical ID, not physical position)

    // Room 4
    rooms[3].id = 4;
    strcpy(rooms[3].north_desc, "you go north, theres a shark circling a boat");
    strcpy(rooms[3].south_desc, "you go south, you enter a closet that leads to a bedroom"); // Returns to Room 3 - matching Room 3's north description
    strcpy(rooms[3].east_desc, "you turn east, the deep blue ocean seems empty");
    strcpy(rooms[3].west_desc, "you turn west, theres a cave that leads to a room"); // Goes to Room 5
    rooms[3].is_start_room = false;
    rooms[3].is_item_room = false;
    rooms[3].is_connector_room = false;
    rooms[3].connected_building_id = 0;

    // Room 5
    rooms[4].id = 5;
    strcpy(rooms[4].north_desc, "you go north, theres a metal chair");
    strcpy(rooms[4].south_desc, "you go south, theres a table with a pen on it");
    strcpy(rooms[4].east_desc, "you turn east, theres a mirror that mimics the ocean"); //Returns to room 4 - matching Room 4's west description
    strcpy(rooms[4].west_desc, "you turn west into nature"); // Goes to Room 6
    rooms[4].is_start_room = false;
    rooms[4].is_item_room = false;
    rooms[4].is_connector_room = false;
    rooms[4].connected_building_id = 0;

    // Room 6
    rooms[5].id = 6;
    strcpy(rooms[5].north_desc, "you go north, looks like a still forest");
    strcpy(rooms[5].south_desc, "you go south, you find a door in a tree and enter"); // Goes to Room 7
    strcpy(rooms[5].east_desc, "you turn east, you escape the natural environment"); // Returns to Room 5 - matching Room 5's west description
    strcpy(rooms[5].west_desc, "you turn west, theres an ewok dancing");
    rooms[5].is_start_room = false;
    rooms[5].is_item_room = false;
    rooms[5].is_connector_room = false;
    rooms[5].connected_building_id = 0;

    // Room 7
    rooms[6].id = 7;
    strcpy(rooms[6].north_desc, "you go north, you find a door in a tree and enter the forest"); // Returns to Room 6 - matching Room 6's south description
    strcpy(rooms[6].south_desc, "you go south, and you take off your vr headset"); // Goes to Room 8
    strcpy(rooms[6].east_desc, "you turn east, its a club with people dancing to weird music");
    strcpy(rooms[6].west_desc, "you turn west, its a large arsenal of guns");
    rooms[6].is_start_room = false;
    rooms[6].is_item_room = false;
    rooms[6].is_connector_room = false;
    rooms[6].connected_building_id = 0;

    // Room 8
    rooms[7].id = 8;
    strcpy(rooms[7].north_desc, "you go north, and you put on a vr headset"); // Returns to Room 7 - matching Room 7's south description
    strcpy(rooms[7].south_desc, "you go south, check your email and its empty");
    strcpy(rooms[7].east_desc, "you turn east, decide to touch grass"); // Goes to Room 9
    strcpy(rooms[7].west_desc, "you turn west, open your phone and see no notifications");
    rooms[7].is_start_room = false;
    rooms[7].is_item_room = false;
    rooms[7].is_connector_room = false;
    rooms[7].connected_building_id = 0;

    // Room 9
    rooms[8].id = 9;
    strcpy(rooms[8].north_desc, "you go north, hop in your R34 GTR and go for a ride"); // Goes to Room 10
    strcpy(rooms[8].south_desc, "you go south, decide to go on a run");
    strcpy(rooms[8].east_desc, "you turn east, take out the trash");
    strcpy(rooms[8].west_desc, "you turn west, go back inside and check your phone"); // Returns to Room 8 - matching Room 8's east description
    rooms[8].is_start_room = false;
    rooms[8].is_item_room = false;
    rooms[8].is_connector_room = false;
    rooms[8].connected_building_id = 0;

    // Room 10
    rooms[9].id = 10;
    strcpy(rooms[9].north_desc, "YOU WIN, you find a steak in the middle console and eat it (GAME OVER) ask to reset?"); // Game over - return to Room 1
    strcpy(rooms[9].south_desc, "you go south, park your car and head back home"); // Returns to Room 9 - matching Room 9's north description
    strcpy(rooms[9].east_desc, "YOU WIN, you find a steak in the middle console and eat it (GAME OVER) ask to reset?"); // Game over - return to Room 1
    strcpy(rooms[9].west_desc, "YOU WIN, you find a steak in the middle console and eat it (GAME OVER) ask to reset?"); // Game over - return to Room 1
    rooms[9].is_start_room = false;
    rooms[9].is_item_room = true;  // This is the item room where the game ends
    rooms[9].is_connector_room = false;
    rooms[9].connected_building_id = 0;
    
    syslog(LOG_INFO, "Building 2 (Tyler's rooms) initialized");
}

/**
 * Get room description based on current room and direction
 */
const char* get_room_description(Room rooms[], int current_room, char direction) {
    // Find the room index (array index is room ID - 1)
    int room_idx = current_room - 1;
    
    // Make sure room index is valid
    if (room_idx < 0 || room_idx >= MAX_ROOMS) {
        return "Invalid room!";
    }
    
    // Return the appropriate description based on direction
    switch(direction) {
        case 'n': return rooms[room_idx].north_desc;
        case 's': return rooms[room_idx].south_desc;
        case 'e': return rooms[room_idx].east_desc;
        case 'w': return rooms[room_idx].west_desc;
        default: return "Invalid direction!";
    }
}

/**
 * Check if a room is a connector room
 */
bool is_connector_room(Room rooms[], int room_id) {
    if (room_id < 1 || room_id > MAX_ROOMS) {
        return false;
    }
    
    return rooms[room_id - 1].is_connector_room;
}

/**
 * Get the building ID that this room connects to
 * Returns 0 if the room doesn't connect to another building
 */
int get_connected_building(Room rooms[], int room_id) {
    if (room_id < 1 || room_id > MAX_ROOMS) {
        return 0;
    }
    
    if (!rooms[room_id - 1].is_connector_room) {
        return 0;
    }
    
    return rooms[room_id - 1].connected_building_id;
}
